---
format_version: 1.1.0
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: ""
app:
  envs:
  - ANSIBLE_HOST_KEY_CHECKING: "False"
  - VM_BUILD_IP: $VM_BUILD_IP
  - XCODE_PATH: $XCODE_PATH
trigger_map:
- push_branch: step/1
  workflow: provision-vm
- push_branch: step/2
  workflow: perform-weekly-cache-update
- push_branch: step/xamarin
  workflow: provision-xamarin-vm
workflows:
  _pod_remove_master:
    steps:
      - script:
          title: pod repo remove master
          run_if: .IsCI
          inputs:
            - content: |-
                #!/usr/bin/env bash
                set -e
                # Originally the command was pod repo remove master
                # it just erased the dir under .cocoapods/repos/master.
                # It is huge. Not by size, but the number of files.
                # Instead just moved to /var/tmp it is way faster and it runs only during ci.
                mv ~/.cocoapods/repos/master /var/tmp/

  _install-dependencies:
    steps:
      - script-runner:
          title: Install dependencies
          inputs:
            - file_path: _scripts/molecule/install_dependencies.sh

  _ansible-play:
    steps:
      - script:
          title: Run Ansible Playbook on CI's build VM
          run_if: .IsCI
          inputs:
            - content: |-
                #!/usr/bin/env bash

                set -e

                pip install -r _scripts/molecule/requirements.txt --log requirements_install.log

                ansible-playbook \
                -vv \
                -e xcode_path="$(xcode-select -p)" \
                ${ADDITIONAL_VARIABLES_TO_ANSIBLE} \
                --connection=local \
                --inventory 127.0.0.1, \
                --limit 127.0.0.1 \
                "${LOCAL_PLAYBOOK_PATH}"

  _cli-version:
    steps:
      - script:
          title: get latest bitrise cli version
          inputs:
            - content: |-
                #!/usr/bin/env bash
                echo $GITHUB_TOKEN
                echo $(curl -H "Authorization: token $GITHUB_TOKEN" \
                --silent https://api.github.com/repos/bitrise-io/bitrise/releases/latest |\
                grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/') > cli_version.txt

  #######################
  #### Main wrkflows ####
  #######################
  ci:
    steps:
    - script-runner:
        title: Check changes
        run_if: .IsCI
        inputs:
        - file_path: _scripts/check_changes.sh
    - script:
        title: Validate bitrise.yml
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex
            bitrise validate -c ./bitrise.yml
    - script:
        title: Lint Ansible playbooks
        deps:
          brew:
            - name: ansible-lint
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -e
            for f in $(find . -name '*playbook.yml'); do
              ansible-lint -c ansible-lint.yaml "$f"
            done
    - script:
        title: Run Yamllint
        deps:
          brew:
            - name: yamllint
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -e
            yamllint -s -c ./yamllint.yaml .
    - build-router-start@0.14.0:
        run_if: |-
          {{enveq "TEST_IS_AVAILABLE" "true"}}
        inputs:
        - wait_for_builds: "true"
        - workflows: $WORKFLOW_TO_TRIGGER
        - access_token: $BITRISE_ACCESS_TOKEN
    - script:
        title: Run danger
        is_always_run: true
        run_if: .IsCI
        inputs:
        - content: |-
            #!/bin/bash
            set -euxo pipefail
            gem install danger
            danger

  generate-system-report:
    steps:
    - script-runner:
        title: Generate system report
        run_if: .IsCI
        inputs:
        - file_path: _scripts/generate_system_report.sh

  perform-weekly-cache-update:
    after_run:
    - _ansible-play
    envs:
    - LOCAL_PLAYBOOK_PATH: ./weekly-cache-update-playbook.yml
    - ADDITIONAL_VARIABLES_TO_ANSIBLE: '-i "${VM_BULD_IP}"'

  perform-weekly-cache-update-with-inventory:
    description: |-
      Runs `ansible` with the `weekly-cache-update-playbook.yml` playbook,
      to update the pre-installed tools' caches
    after_run:
    - _ansible-play
    envs:
    - LOCAL_PLAYBOOK_PATH: ./weekly-cache-update-playbook.yml
    - ADDITIONAL_VARIABLES_TO_ANSIBLE: '-i "./_tmp/weekly-update-inventory"'

  provision-vm:
    description: |-
      Runs `ansible` with the `playbook.yml` playbook, to provision the
      Virtual Machine. After this the VM should be completely ready,
      you just have to save it / package it / distribute it.
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash

            set -e

            ansible-playbook -v \
            -e xcode_path="${XCODE_PATH}" \
            --private-key ./vagrant-insecure_private_key \
            -i "${VM_BUILD_IP}", \
            "./playbook.yml"

  provision-xamarin-vm:
    description: |-
      Runs `ansible` with the `xamarin-playbook.yml` playbook, to provision the
      Virtual Machine. After this the VM should be completely ready,
      you just have to save it / package it / distribute it.
    after_run:
    - _ansible-play
    envs:
    - LOCAL_PLAYBOOK_PATH: ./xamarin-playbook.yml
    - ADDITIONAL_VARIABLES_TO_ANSIBLE: '-i "${VM_BUILD_IP}",'

  weekly-cache-update-test:
    before_run:
    - _cli-version
    - _pod_remove_master
    after_run:
    - _ansible-play
    envs:
    - LOCAL_PLAYBOOK_PATH: ./weekly-cache-update-playbook.yml

  intermediate-setup-test:
    before_run:
    - _pod_remove_master
    after_run:
    - _ansible-play
    envs:
      - LOCAL_PLAYBOOK_PATH: ./playbook.yml

  test_ssh-setup:
    envs:
    - ROLE: "ssh-setup"
    after_run:
    - _run_molecule_test

  test_android:
    envs:
    - ROLE: "android"
    after_run:
    - _run_molecule_test

  test_intermediate-setup:
    envs:
    - ROLE: "intermediate-setup"
    after_run:
    - _run_molecule_test

  test_bitrise-cli:
    envs:
    - ROLE: "bitrise-cli"
    after_run:
    - _run_molecule_test

  test_go:
    envs:
    - ROLE: "go"
    after_run:
    - _run_molecule_test

  test_remote-access:
    envs:
    - ROLE: "remote-access"
    after_run:
    - _run_molecule_test

  test_brew-repos-fix:
    envs:
    - ROLE: "brew-repos-fix"
    after_run:
    - _run_molecule_test

  test_xamarin:
    envs:
    - ROLE: "xamarin"
    after_run:
    - _run_molecule_test

  test_profiles:
    envs:
    - ROLE: "profiles"
    after_run:
    - _run_molecule_test

  test_bitrise-den:
    envs:
    - ROLE: "bitrise-den"
    after_run:
    - _run_molecule_test

  test_python:
    envs:
    - ROLE: "python"
    after_run:
    - _run_molecule_test

  ##############################
  #### Utility workflows #######
  ##############################

  _run_molecule_test:
    before_run:
      - _install-dependencies
    steps:
      - change-workdir@1:
          title: hopp into the test folder
          inputs:
            - path: roles/tests
      - script-runner:
          title: molecule test
          inputs:
            - file_path: ../../_scripts/molecule/test.sh
      - deploy-to-bitrise-io@1: {}
